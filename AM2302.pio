/*
El siguiente programa controla el funcionamiento del sensor de 
temperatura y humedad AM2302 usando ensambaldor PIO, basado en una carta ASM ajunta en la documentacion
La frecuencia de ejecucion de instrucciones debe ser de 1us
*/
.pio_version 0                      ; Version de PIO assembly

.program AM2302                     ; Nombre del programa

set pindirs, 1                   ; En un principio, se declara que el pin sera de salida
set pins, 1                      ; Se pone el bit en alto

;=======================================================================================================================
; Estado de inactividad esperando la senal de inicio, se mantiene el hilo de comunicacion en alto
; Para iniciar se comprueba un valor puesto en la FIFO RX por parte del nucleo principal
idle:
    pull                             ; Mueve del buffer de lectura al OSR, si no hay nada, no avanza y mantiene en alto
    out x, 32                        ; Guarda el valor leido en el registro X
    set y, 7                         ; Guarda el valor clave en el registro y. El valor clave se configura aqui.
    jmp x!=y, idle                   ; Si no son iguales, regresa a esperar un nuevo valor
    set pindirs, 1                   ; En un principio, se declara que el pin sera de salida
    set pins, 1                      ; Se pone el bit en alto
;=======================================================================================================================

;=======================================================================================================================
; En este estado se mantiene en bajo el estado del pin por 1 ms (1.152 ms para ser exactos)
;_________              
;         \_____________________/
;          |<------1.1ms------>|
st_1:
set pins, 0               [31]            ; Se pone el bit en bajo
set x, 31                 [31]            ; 1 instrucción + 31 ciclos de delay
set y, 31                 [31]            ; 1 instrucción + 31 ciclos de delay
    st_1_loop_x:
        st_1_loop_y:
            jmp y--, st_1_loop_y          ; 32 ciclos
            set y, 31                     ; 1 ciclo, 33 ciclos
    jmp x-- st_1_loop_x                   ; 32 ciclos -->  32 + 32 + 32 + (32 x 33)
;=======================================================================================================================

;=======================================================================================================================
; En este estado se mantiene en bajo el estado del pin por 32 us
;_________                       _______
;         \_____________________/
;          |<------1.1ms------>|<-32us->|
st_2:
    set pins, 1            [31]           ; Se pone el pin en alto 31 + 1 -> 32 ciclos (32 us)
;=======================================================================================================================

;=======================================================================================================================
; En este estado se configura el canal a entrada para obtener las senales de confirmacion por parte del sensor
;_________                       _______            __________
;         \_____________________/       \__________/          \________
;          |<------1.1ms------>|<-32us->|<--80us-->|<--80us-->|<-50us->|
st_3:
    set pindirs, 0      ; Se copnfigura el pin como entrada
    wait 0 pin 0        ; Se espera a la llegada del pulso bajo de 80 us
    wait 1 pin 0        ; Se espera a la llegada del pulso alto de 80 us
    wait 0 pin 0        ; Se espera a la llegada del pulso bajo de 50 us
                        ; Este pulso es el inicio de la transmision de datos, aunque no representa ningun dato en si
;=======================================================================================================================

;=======================================================================================================================
; En este estado se lee la informacion del sensor (humedad y temperatura), determinando si los pulsos son 1's o 0's
set y, 31                           ; Se van a leer 32 bits de info (el maximo posible)

read_data:
    wait 1 pin 0        [25]        ; Espera a que el pin suba.  Cuando lo hace,
                                    ; espera 25 ciclos, que junto al cilco de la instruccion
                                    ; Dan una espera de 26 [us]
    in pins, 1                      ; Se guarda el dato del pin en el ISR
                                    ; Si han pasado 26 [us] y se mantuvo en 1, es 1
                                    ; Sino, es un 0, pues este habra caido antes a 0, que es lo que se guarda
    wait 0 pin 0                    ; Espera a bajar para empezar de nuevo
    jmp y--, read_data              ; Salta

; Al terminar este bloque, se ha leido 32 bits de datos (temperatura y humedad rel)
; Debido a la configuracion de autopush con humbral de activacion de 32 bits (el maximo)
; Al salir de este estado, los datos de temperatura y humedad pueden ser leidos
;=======================================================================================================================

;=======================================================================================================================
; En este estado se lee la informacion del sensor (checksum), determinando si los pulsos son 1's o 0's
set y, 7                            ; Se van a leer 8 bits de info
read_sum:
    wait 1 pin 0        [25]        ; Espera a que el pin suba.  Cuando lo hace,
                                    ; espera 25 ciclos, que junto al cilco de la instruccion
                                    ; Dan una espera de 26 [us]
    in pins, 1                      ; Se guarda el dato del pin en el ISR
                                    ; Si han pasado 26 [us] y se mantuvo en 1, es 1
                                    ; Sino, es un 0, pues este habra caido antes a 0, que es lo que se guarda
    wait 0 pin 0                    ; Espera a bajar para empezar de nuevo
    jmp y--, read_sum               ; Salta

; Al terminar este bloque se han leido 40 bits (temperatura, humedad y checksum)
push block                          ; Se envia la informacion del checksum al FIFO RX para que el procesador los lea
;=======================================================================================================================

jmp idle                               ; Se regresa al estado inactivo



% c-sdk {
static inline void AM2302_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);            // Se inicializa el pin que se usara
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);  // Se configura como base en la maquina de estados
    pio_sm_config c = AM2302_program_get_default_config(offset);    // Se crea una config para la mde
    sm_config_set_set_pins(&c, pin, 1);             // Se configura el pin para cambiarlo de estado a 1 o 0 (set)
    sm_config_set_in_pins(&c, pin);                 // Se configura como pin de entrada (wait e in)
    sm_config_set_in_shift(&c, false, true, 32);    // Se configura la FIFO RX para activar autopush y el treshold a 32
    float div = clock_get_hz (clk_sys) * 1e-6;      // 125 GHz * 1  u -> 125 --> 125 GHz/125 -> 1 GHz
    sm_config_set_clkdiv (&c, div);                 // Se configura el reloj de la mde a 1 GHz 
    pio_sm_init (pio, sm, offset, &c);              // Se aplican las configuraciones
    pio_sm_set_enabled(pio, sm, true);              // Se inica la maquina
}
%}








